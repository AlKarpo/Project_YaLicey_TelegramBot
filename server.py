import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import wikipediaapi
from ImageParser import YandexImage
import json
from data import db_session
from data.results import User

parser = YandexImage()

"""–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""

quest = False
place = False
test = False
i = 0
id_check = []
result_check = []

"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞"""

mark = {"0": '–∫—Ä–∞–π–Ω–µ —Å–∫—É–¥–Ω—ã–µ', "1": '–∫—Ä–∞–π–Ω–µ —Å–∫—É–¥–Ω—ã–µ', "2": '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ', "3": '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ', "5": '–Ω–µ–ø–ª–æ—Ö–∏–µ',
        "4": '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ', "6": '–Ω–µ–ø–ª–æ—Ö–∏–µ', "7": '—Ö–æ—Ä–æ—à–∏–µ', "8": '—Ö–æ—Ä–æ—à–∏–µ', "9": '–æ—Ç–ª–∏—á–Ω—ã–µ', "10": '–æ—Ç–ª–∏—á–Ω—ã–µ'}

with open('questions.json', 'r', encoding='utf-8') as cat_file:
    data = json.load(cat_file)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞"""

markup = ReplyKeyboardMarkup([['‚ùì –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'üåÑ –ù–∞–π–¥–∏ —Ñ–æ—Ç–æ'],
                              ['üìï –í–∏–∫—Ç–æ—Ä–∏–Ω–∞']], resize_keyboard=True, one_time_keyboard=True)

reply_search_back = ReplyKeyboardMarkup([['üìé –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']], resize_keyboard=True)

reply_photos = ReplyKeyboardMarkup([['üíæ –ï—â—ë —Ñ–æ—Ç–æ', 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']], resize_keyboard=True)

reply_categori_photos = ReplyKeyboardMarkup([['üéñ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å', 'üíÇüèø –ú–µ—Å—Ç–æ'],
                                             ['üìú –ö–∞—Ä—Ç–∞', '‚ùå –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏']], resize_keyboard=True,
                                            one_time_keyboard=True)

reply_tests = ReplyKeyboardMarkup([['üñä –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                                   ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']], resize_keyboard=True, one_time_keyboard=True)

reply_categories = ReplyKeyboardMarkup([['‚öî –í–æ–π–Ω–∞ 1812–≥.', '‚öì –≠–ø–æ—Ö–∞ –ü–µ—Ç—Ä–∞ I'],
                                        ['üóû –°–°–°–† 1960-1980—Ö –≥–≥', 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']], resize_keyboard=True,
                                       one_time_keyboard=True)

reply_answer = ReplyKeyboardMarkup([['1', '2', '3']], resize_keyboard=True,
                                   one_time_keyboard=True)


async def start(update, context):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –≤–∞—à –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –º–∏—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏."
        " –Ø —Ä–∞—Å—Å–∫–∞–∂—É –æ –ø—Ä–æ—à–ª–æ–º —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞, —Ç–æ–ª—å–∫–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ.\n"
        " \n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help")
    await update.message.reply_text(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:", reply_markup=markup)


async def search_answer(question):
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –ø–æ–∏—Å–∫ –Ω–∞ –í–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    wiki_wiki = wikipediaapi.Wikipedia('ru')
    page_py = wiki_wiki.page(question)


async def ask_question(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    global quest, place, test, key
    if update.message.text == "‚ùì –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
        chat_id = update.message.chat_id
        await context.bot.send_message(chat_id, text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å')
        quest, place, test = True, False, False
    elif update.message.text == "üåÑ –ù–∞–π–¥–∏ —Ñ–æ—Ç–æ":
        await update.message.reply_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å?", reply_markup=reply_categori_photos)
        quest, place, test = False, True, False
    elif update.message.text == "üìï –í–∏–∫—Ç–æ—Ä–∏–Ω–∞":
        quest, place, test = False, False, True
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!", reply_markup=reply_tests)


async def comands(update, context):
    """–û–¥–∏–Ω –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
    –ó–¥–µ—Å—å —á–µ—Ä–µ–∑ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Å–∫–∏ –∫–æ–¥–∞ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫–∏–∏ –±–æ—Ç–∞
    """
    global page_py, b, list_of_photos
    if quest:
        search = update.message.text
        wiki_wiki = wikipediaapi.Wikipedia('ru')
        page_py = wiki_wiki.page(search)
        if page_py.exists():
            await update.message.reply_text(page_py.title, reply_markup=reply_search_back)
            await update.message.reply_text(page_py.summary, reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text=f'–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ - {page_py.title}', url=page_py.fullurl)]]))
        else:
            await update.message.reply_text('–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
                                            ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è/–∏–º—è –ª–∏—á–Ω–æ—Å—Ç–∏.'
                                            ' –ò–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—à–∏—Ç–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã,'
                                            ' –∞ –Ω–∞—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ - —Å –º–∞–ª–µ–Ω—å–∫–æ–π',
                                            reply_markup=reply_search_back)
    if place and update.message.text != 'üíæ –ï—â—ë —Ñ–æ—Ç–æ':
        search = update.message.text
        list_of_photos = []
        chat_id = update.message.chat_id
        counter = 0
        for item in parser.search(search + key):
            if counter < 10:
                b = item.preview.url
                list_of_photos.append(b)
                counter += 1
            else:
                break
        await context.bot.send_photo(chat_id, list_of_photos[0], reply_markup=reply_photos)

    if test:
        chat_id = update.message.chat_id
        await context.bot.send_message(chat_id, text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç', reply_markup=reply_categories)

    if update.message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await find_leader(update, context)


async def printing(update, context):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞-–ø–æ–∏—Å–∫–æ–≤–∏–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è —Ç–µ–∫—Å—Ç —Å –≤–∏–∫–∏–ø–µ–¥–∏–∏ –≤ txt —Ñ–∞–π–ª–µ"""
    if update.message.text == 'üìé –°–æ—Ö—Ä–∞–Ω–∏—Ç—å':
        with open(f'{page_py.title}.txt', 'w', encoding='utf-8') as f:
            f.write(page_py.title + '\n')
            f.write(page_py.summary)
            try:
                f = open(f'{page_py.title}.txt')
                f.close()
                chat_id = update.message.chat_id
                await context.bot.send_message(chat_id, text=f'–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
            except FileNotFoundError:
                chat_id = update.message.chat_id
                await context.bot.send_message(chat_id, text=f'–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!')
    elif update.message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        await update.message.reply_text("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:", reply_markup=markup)


async def act_photos(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    global i
    try:
        if update.message.text == 'üíæ –ï—â—ë —Ñ–æ—Ç–æ':
            chat_id = update.message.chat_id
            await context.bot.send_photo(chat_id, list_of_photos[i], reply_markup=reply_photos)
            i += 1
        elif update.message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            await update.message.reply_text("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
                                            reply_markup=markup)
    except IndexError:
        i = 1
        await update.message.reply_text("–§–æ—Ç–æ–≥–æ—Ä–∞—Ñ–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å", reply_markup=markup)
        await update.message.reply_text("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
                                        reply_markup=markup)


async def choosing(update, context):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ"""
    global key
    key = ''
    if update.message.text == 'üéñ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å':
        key = ' –ü–æ—Ä—Ç–µ—Ä—Ç'
    elif update.message.text == 'üíÇüèø –ú–µ—Å—Ç–æ':
        key = ' –§–æ—Ç–æ'
    elif update.message.text == 'üìú –ö–∞—Ä—Ç–∞':
        key = ' –ö–∞—Ä—Ç–∞'
    elif update.message.text == '‚ùå –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
        key = ''
    chat_id = update.message.chat_id
    await context.bot.send_message(chat_id, text=f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å')


async def print_answer(update, context, i):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    if i < 10:
        await update.message.reply_text(f'{data["name"][name_event]["id"][str(i + 1)]["question"]}')
        await update.message.reply_text(f'–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n'
                                        f'1) {data["name"][name_event]["id"][str(i + 1)]["1"]}\n'
                                        f'2) {data["name"][name_event]["id"][str(i + 1)]["2"]}\n'
                                        f'3) {data["name"][name_event]["id"][str(i + 1)]["3"]}\n',
                                        reply_markup=reply_answer)


async def test_choose(update, context):
    global i
    await print_answer(update, context, i)
    i += 1


async def start_dialog(update, context):
    """–§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    global answer, key, name_event
    answer = []
    key = update.message.text
    if update.message.text == "‚öî –í–æ–π–Ω–∞ 1812–≥.":
        name_event = "napoleonic_war"
        await test_choose(update, context)
    if update.message.text == "‚öì –≠–ø–æ—Ö–∞ –ü–µ—Ç—Ä–∞ I":
        name_event = "petr"
        await test_choose(update, context)
    if update.message.text == "üóû –°–°–°–† 1960-1980—Ö –≥–≥":
        name_event = "ussr"
        await test_choose(update, context)
    return 1


async def responser(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –≤ –∑–∞–Ω–æ—Å—è—â–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î –≤ –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    global i
    otvet = update.message.text
    if otvet == data["name"][name_event]["id"][str(i)]["answer"]:
        answer.append('–í–µ—Ä–Ω–æ')
    await test_choose(update, context)
    if i < 11:
        return i
    else:
        await update.message.reply_text('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!')
        db_session.global_init("db/results.db")
        db_sess = db_session.create_session()
        for user in db_sess.query(User).all():
            id_check.append(user.id)
            result_check.append(user.result)
        user_telegram = update.message.from_user
        user = User()
        if len(id_check) > 0:
            user.id = id_check[-1] + 1
            user.result = id_check[-1] + 1
        else:
            user.id = 1
            user.result = 1
        user.name = user_telegram.first_name
        user.test = key
        user.result = (len(answer))
        user.result = (len(answer))
        db_sess.add(user)
        db_sess.commit()
        i = 0
        await update.message.reply_text(
            f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç {len(answer)}/10. –í–∞—à–∏ –ø–æ–∑–Ω–∞–Ω–∏—è –≤ —ç—Ç–æ–π —Ç–µ–º–µ {mark[str(len(answer))]}',
            reply_markup=markup)
        return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞")
    return ConversationHandler.END


async def help(update, context):
    await update.message.reply_text("/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ :)",
                                    reply_markup=markup)


async def compare(update, context, user, maxi, name):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞ –ø–æ –æ—á–∫–∞–º"""
    if user.result > maxi:
        maxi = user.result
        name = user.name
    return maxi, name


async def find_leader(update, context):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ –ë–î"""
    maxi_nap, maxi_us, maxi_petr = {'name': '', 'points': 0}, {'name': '', 'points': 0}, {'name': '', 'points': 0}
    db_session.global_init("db/results.db")
    db_sess = db_session.create_session()
    for user in db_sess.query(User).all():
        if user.test == '‚öî –í–æ–π–Ω–∞ 1812–≥.':
            maxi_nap['points'], maxi_nap['name'] = await compare(update, context, user, maxi_nap['points'],
                                                                 maxi_nap['name'])
        if user.test == '‚öì –≠–ø–æ—Ö–∞ –ü–µ—Ç—Ä–∞ I':
            maxi_petr['points'], maxi_petr['name'] = await compare(update, context, user, maxi_petr['points'],
                                                                   maxi_petr['name'])
        if user.test == 'üóû –°–°–°–† 1960-1980—Ö –≥–≥':
            maxi_us['points'], maxi_us['name'] = await compare(update, context, user, maxi_us['points'],
                                                               maxi_us['name'])
    await update.message.reply_text(f'üèÜ –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤:\n'
                                    f'------------------------\n'
                                    f'‚öî –í–æ–π–Ω–∞ 1812–≥.: {maxi_nap["name"]} - {maxi_nap["points"]} –±–∞–ª–ª–∞\n'
                                    f'‚öì –≠–ø–æ—Ö–∞ –ü–µ—Ç—Ä–∞ I: {maxi_petr["name"]} - {maxi_petr["points"]} –±–∞–ª–ª–∞\n'
                                    f'üóû –°–°–°–† 1960-1980—Ö –≥–≥: {maxi_us["name"]} - {maxi_us["points"]} –±–∞–ª–ª–∞\n')


def main():
    application = Application.builder().token('6152762952:AAGcTbTTdmnfzeJS4KcVhvQmonqr44BaEcQ').build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(
        MessageHandler(filters.Regex("^(‚ùì –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏|üåÑ –ù–∞–π–¥–∏ —Ñ–æ—Ç–æ|üìï –í–∏–∫—Ç–æ—Ä–∏–Ω–∞)$"),
                       ask_question, block=True))
    application.add_handler(
        MessageHandler(filters.Regex("^(üíæ –ï—â—ë —Ñ–æ—Ç–æ|üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)$"),
                       act_photos, block=True))
    application.add_handler(
        MessageHandler(filters.Regex("^(üìé –°–æ—Ö—Ä–∞–Ω–∏—Ç—å|üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)$"),
                       printing, block=True))
    application.add_handler(
        MessageHandler(filters.Regex("^(üéñ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å|üíÇüèø –ú–µ—Å—Ç–æ|üìú –ö–∞—Ä—Ç–∞|‚ùå –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)$"),
                       choosing, block=True))
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^(‚öî –í–æ–π–Ω–∞ 1812–≥.|‚öì –≠–ø–æ—Ö–∞ –ü–µ—Ç—Ä–∞ I|üóû –°–°–°–† 1960-1980—Ö –≥–≥|üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)$"),
                           start_dialog, block=True)],
        states={
            1: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            2: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            3: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            4: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            5: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            6: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            7: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            8: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            9: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)],
            10: [MessageHandler(filters.Regex("^(1|2|3)$"), responser, block=True)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT, comands))
    application.run_polling()


if __name__ == '__main__':
    main()
